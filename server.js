const net = require('node:net');

const server = net.createServer();

// * To set max connection limit to server
// server.maxConnections = 1;

const clients = [];

function handleClientLeave(clientId) {
  clients.map(client => {
    client.socket.write(`> User ${clientId} left the room!`);
  })
}

server.on('connection', (socket) => {
  // * socekt = net.Socket (Duplex Stream)
  console.log('A new connection to the server');

  const clientId = clients.length + 1;

  clients.push({ id: clientId, socket });

  // * Inform new socket about its id generated by server
  socket.write(`id-${clientId}`);

  // * Broadcasting message to everyone when someone enters the chat room.
  clients.map(client => {
    if(client.id !== clientId) {
      client.socket.write(`> User ${clientId} Joined!`);
    }
  })

  socket.on('data', (chunk) => {
    // console.log(chunk.toString('utf-8'));

    const dataString = chunk.toString('utf-8');
    const id = dataString.substring(0, dataString.indexOf('-'));
    const message = dataString.substring(dataString.indexOf('-message-')+9);
    clients.map(client => {
      client.socket.write(`> User ${id}: ${message}`);
    })
  })

  // * Broadcasting message to everyone when someone leaves the chat room.
  socket.on('end', () => {
    handleClientLeave(clientId);
  })

  socket.on('errro', () => {
    handleClientLeave(clientId);
  })
})

server.listen(3008, "127.0.0.1", () => {
  console.log(`Listening on ${JSON.stringify(server.address())}`);
})